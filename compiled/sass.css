/* ==========================================================================
   #BOX OBJECT
   ========================================================================== */
/**
 * Creates a box with consistent padding around the children.
 *
 *     <div class="o-box">
 *         <p>One</p>
 *         <p class="o-box__lip">Two (with lip)</p>
 *         <p>Three</p>
 *     </div>
 *
 */
.o-box {
  padding: 0.5em; }
  .o-box > :first-child {
    margin-top: 0; }
  .o-box > :last-child {
    margin-bottom: 0; }

.o-box__lip {
  margin-left: -0.5em;
  margin-right: -0.5em;
  padding-left: 0.5em;
  padding-right: 0.5em; }

/* ==========================================================================
   #CENTRE OBJECT
   ========================================================================== */
/**
 * Centres content either horizontally, vertically or in both directions.
 *
 *     <!-- Centred horizontally -->
 *     <div class="o-centre-h">
 *         <p>One</p>
 *     </div>
 *
 *     <!-- Centred vertically -->
 *     <div class="o-centre-v">
 *         <p>One</p>
 *     </div>
 *
 *     <!-- Centred horizontally and vertically -->
 *     <div class="o-centre-hv">
 *         <p>One</p>
 *     </div>
 *
 * 1. These are necessary to ensure that the "centre" element takes the full
 *    width/height of the parent so the content can be correctly positioned.
 */
.o-centre-h,
.o-centre-hv {
  display: flex;
  justify-content: center;
  width: 100%;
  /* [1] */ }

.o-centre-v,
.o-centre-hv {
  align-items: center;
  display: flex;
  height: 100%;
  /* [1] */ }

/* Centred Object
   ========================================================================== */
/**
 * A variant that centres itself rather than its children. Although it's a
 * separate object, it makes sense to combine it with the Centre object.
 *
 *     <!-- Centred horizontally -->
 *     <div class="o-centreParent">
 *         <p class="o-centre-h">Content</p>
 *     </div>
 *
 *     <!-- Centred vertically -->
 *     <div class="o-centreParent">
 *         <p class="o-centre-v">Content</p>
 *     </div>
 *
 *     <!-- Centred horizontally and vertically -->
 *     <div class="o-centreParent">
 *         <p class="o-centre-hv">Content</p>
 *     </div>
 *
 * 1. The "centre parent" contains any "centred" child.
 * 2. There's currently no way of combining 2 transform values so we need to
 *    manually replace the combined value.
 */
.o-centreParent {
  position: relative;
  /* [1] */ }

.o-centred-h,
.o-centred-hv {
  left: 50%;
  position: absolute;
  transform: translateX(-50%); }

.o-centred-v,
.o-centred-hv {
  position: absolute;
  top: 50%;
  transform: translateY(-50%); }

.o-centred-hv {
  transform: translate(-50%, -50%);
  /* [2] */ }

/* ==========================================================================
   #CLEARFIX OBJECT
   ========================================================================== */
/**
 * Contains floated elements so that the parent does not collapse.
 *
 *     <div class="o-clearfix">
 *         <div style="float:left;">Floated left</div>
 *         <div style="float:left;">Floated left</div>
 *         <div style="float:left;">Floated left</div>
 *     </div>
 *
 */
.o-clearfix::before, .o-clearfix::after {
  content: "";
  display: table; }

.o-clearfix::after {
  clear: both; }

/* ==========================================================================
   #LIST BARE OBJECT
   ========================================================================== */
/**
 * Removes the list styling from a list.
 *
 *     <ul class="o-list-bare">
 *         <li class="o-list-bare__item">One</li>
 *         <li class="o-list-bare__item">Two</li>
 *         <li class="o-list-bare__item">Three</li>
 *     </ul>
 *
 * 1. Prevents whitespace appearing around a block-level child.
 */
.o-list-bare {
  list-style-type: none;
  margin: 0;
  padding: 0; }

.o-list-bare__item {
  display: block;
  /* [1] */ }

/* ==========================================================================
   #MEDIA OBJECT
   ========================================================================== */
/**
 * Aligns text next to an image. The image may be either on the left, the right
 * or both.
 *
 *     <div class="o-media">
 *         <div class="o-media__left">Left</div>
 *         <div class="o-media__body">Text</div>
 *         <div class="o-media__right">Right</div>
 *     </div>
 *
 */
.o-media {
  display: flex;
  flex-direction: row;
  width: 100%; }

.o-media__left {
  align-self: flex-start;
  margin-right: 0.5em; }

.o-media__right {
  align-self: flex-start;
  margin-left: 0.5em; }

.o-media__body {
  align-self: center;
  flex-grow: 1; }

/* ==========================================================================
   #PACK OBJECT
   ========================================================================== */
/**
 * Handles objects laid next to one another. A little like this (assuming # is
 * an element):
 *
 *     +-------+
 *     | # # # |
 *     +-------+
 *
 *     <div class="o-pack">
 *         <div class="o-pack__item">One</div>
 *         <div class="o-pack__item">Two</div>
 *         <div class="o-pack__item">Three</div>
 *         <!-- ... -->
 *     </div>
 *
 */
.o-pack {
  display: flex;
  flex-direction: row;
  width: 100%; }

.o-pack__item {
  margin-left: 0.25em;
  margin-right: 0.25em; }
  .o-pack__item:first-child {
    margin-left: 0; }
  .o-pack__item:last-child {
    margin-right: 0; }

/* ==========================================================================
   #RATIO OBJECT
   ========================================================================== */
/**
 * Creates content with a set aspect ratio of width to height.
 *
 *    <div class="o-ratio">
 *        <div class="o-ratio__content">Content</div>
 *    </div>
 *
 * 1. Assume an aspect ratio of 1:1 by default.
 */
.o-ratio {
  display: block;
  padding-top: 100%;
  /* [1] */
  position: relative; }

.o-ratio__content {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%; }

/* Example aspect ratios
   ========================================================================== */
/**
 * Example usage:
 *
 *    <div class="o-ratio o-ratio--4:3">
 *        <div class="o-ratio__content">4:3</div>
 *    </div>
 *
 */
.o-ratio--4\:3 {
  padding-top: calc((3 / 4) * 100%); }

.o-ratio--16\:9 {
  padding-top: calc((9 / 16) * 100%); }

.o-ratio--16\:10 {
  padding-top: calc((10 / 16) * 100%); }

/* ==========================================================================
   #STACK OBJECT
   ========================================================================== */
/**
 * Handles objects laid next to one ontop of another. A little like this
 * (assuming # is an element):
 *
 *     +---+
 *     | # |
 *     | # |
 *     | # |
 *     +---+
 *
 *     <div class="o-stack">
 *         <div class="o-stack__item">One</div>
 *         <div class="o-stack__item">Two</div>
 *         <div class="o-stack__item">Three</div>
 *         <!-- ... -->
 *     </div>
 *
 */
.o-stack {
  display: flex;
  flex-direction: column; }

.o-stack__item {
  margin-bottom: 0.5em; }
  .o-stack__item:last-child {
    margin-bottom: 0; }

/* ==========================================================================
   #WAFFLE OBJECT
   ========================================================================== */
/**
 * Lays elements out in a grid-like pattern. This is intended to handle
 * situations where the elements are the same width. A little like this
 * (assuming # is an element):
 *
 *     +-----+
 *     | # # |
 *     | # # |
 *     +-----+
 *
 *     <div class="o-waffle">
 *         <div class="o-waffle__item">One</div>
 *         <div class="o-waffle__item">Two</div>
 *         <div class="o-waffle__item">Three</div>
 *         <!-- ... -->
 *     </div>
 *
 * 1. Make sure that these two values are the same, although the parent value
 *    should be negative.
 * 2. Make sure these values are double the value mentioned in [1].
 * 3. Assume 4 columns by default.
 */
.o-waffle {
  display: flex;
  flex-flow: row wrap;
  margin: -0.25em;
  width: calc(100% + 0.5em); }

.o-waffle__item {
  margin: 0.25em;
  width: calc((100% / 4) - 0.5em); }
